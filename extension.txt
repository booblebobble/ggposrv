--Extensions for Fightcade--

Basic explanation of what's here and what it does.  See full documentation in the code files for more.


OVERVIEW

The Extension package is a set of tools to allow the easy coding and integration of new gamemodes into the FC client and server.  An extension consists of two associated modules - one living on the server and the other in the client - each containing a class derived from ExtensionBase.  This class will be automatically instantiated once in the client shortly after login, and once for each channel on the server during server startup.  The client instance and the server instance associated with the client's channel communicate directly via methods in ExtensionBase.  Extensions are notified of user activity through signals which they can subscribe to.  Matches can be created and monitored from the server with the ExtensionMatch class, which will handle the startup of a match and provide updates on in-game events (player health/game victories/round victories).  This last feature needs to be configured on a game-by-game basis and for now only works for SF3:3S.

Game events are monitored using Windows API calls to directly read specific locations in the emulator's process memory Only one of the two players need to be running Windows for this to work.  See client version of extension.py for full details.  The technique used here has been used before in a companion program I wrote to insert training mode features into SF3.  This program has been downloaded hundreds of times and by all reports the technique used is reliable and causes no other issues.  (See here for info on this other program: https://www.youtube.com/watch?v=vE27xe0QM64)

I modified the existing fightcade code as little as possible.  An additional message code (Protocol member) was added to create a communication channel between the server and client extension objects.  These talk solely to each other, and interaction with the main FC code comes only from signals emitted from within FC or via pre-written methods in the Extension class.

Finally, three extensions are included: Tournaments, Quick matchmaking, and King of the Hill. See below for descriptions.

The server will need the following packages available:
Wrapt (for the @synchronized decorator)
Dateutil
Challonge API.  Available from http://github.com/russ-/pychallonge.


CORE CLASSES

The files and classes of the package mirror each other between client and server.

Extension - Receives events from and otherwise handles all dealings with the existing fightcade code.  Encodes messages to be sent via the existing protocol.  Decodes received messages and routes them to the appropriate object.  Stores and retrieves user data to/from a database server side, and in the application settings clientside.  Provides access to the Referee.  Extensions do not use this class directly, only indirectly through functions in ExtensionBase.

ExtensionMatch (Server only) - This object represents a match between two players.  When created it will attempt to begin an emulator session between two clients and provide a stream of events to a provided callback giving updates on the progress of match creation and in-game events (when possible).  Also manages spectate requests in accordance with an extension's spectator policy.

ExtensionBase - Base class for all extensions.  Provides a simple interface to communications methods, user activity signals, user data storage, and (on the server) match creation.


INCLUDED EXTENSIONS

Tournaments - Creates and runs tournaments start to finish and integrates with Challonge to create and fill brackets.  Registration and score reporting are done via the client UI, and sending scores to challonge is done from the server via the Challonge API.  Conflicts can be resolved by tournament moderators or automatically by the server using automated scoring if available, or random choice otherwise.

The tournament schedule is read from the tournamentsettings.txt file on the server, which also holds the Challonge username and API key (available in account settings) for the challonge account tournament brackets are to be posted under. The credentials currently in the file are for a test account I have.

The prize for winning - for now - is that your name appears in gold in the user list in the room you won the tournament in.


QuickMatch - Basic matchmaking.  Users can filter opponents by ping, but apart from that players get paired up first-come-first-served.  If we are in a room where we can monitor game wins, the first player to win 2 games will be declared the winner and the match ended.  Otherwise the game just stays open until the players quit.

King of the Hill - A queue of players attempt to knock off the current champion one by one.  Winning streak is displayed inside the fightcade client and users can subscribe to automatically spectate each match as it starts.

Game monitoring is necessary for this one, so this extension is only available in rooms where this is configured.


CREATING AN EXTENSION

An extension consists of a pair of code files, one in the server and one in the client, both containing a class deriving from their respective versions of ExtensionBase.  To 'install' it, add an entry to ExtensionDict in both versions (client+server) of Extension.py with an ID number as key and the ExtensionBase subclass as value. (ID numbers must be unique, positive, and not equal to 0 or 1, which are reserved)  Once these entries are added, startup is taken care of automatically.  The server will instantiate every extension in its copy of ExtensionDict, but a client will only instantiate it if there is a companion on the server.  Note that this means that an extension can be disabled universally by removing it from the server copy of ExtensionDict.

The client class is a singleton.  It will be instantiated shortly after login.  The server class will be instantiated once for every channel at server startup.  I found it far more convenient to have a separate instance for each room than attempt to keep track of each room's data separately inside a single instance.  Since there is no interaction between rooms this seems logical anyway.

The client class should override the hide() classmethod of ExtensionBase with code to completely hide the extension's UI elements.  hide() is called *before* instantiation, and in the event the server has disabled a particular extension (as described above) that is the only piece of the extension's code that will ever be called.

Here's a brief overview of the builtin tools provided for extensions.

**Communication**

Communication is handled primarily through the sendMessage (inherited from ExtensionBase) and receiveMessage methods.  A 'message' consists of a positive integer and a json-serializable python object.  A client extension instance is linked to the server instance belonging to the channel the client is in, and a message passed to sendMessage in one will be routed to receiveMessage in the other.  

Both server and client have a chatMessage command, which will display a string in a client's chat window (GGPOWindow.appendChat).

Finally, the server has the broadcastMessage and broadcastChatMessage methods that allow sending messages to several clients at once.

**Text Anchors**

Both client and server versions of ExtensionBase contain a buildAnchorText method to construct an html link from a provided key and link text.  If included in a string passed to chatMessage, after the link is clicked the provided key will be sent to the ExtensionBase.receiveAnchorClick method on the server (which should be overridden if this feature is used).

**Chat Commands**

Extensions may receive messages via the chat box.  To use this, override the chatCommand class property on the server with a string containing the command keyword.  So if chatCommand is "foo" and a client enters "/foo a b c" in chat, the argument list ["a", "b", "c"] will be sent to ExtensionBase.receiveChatCommand on the server. (override if needed)

**Application Settings**

From the client, extensions may store persistent data with the saveSetting and loadSetting methods (wrappers for Settings methods).  Picklable python objects may be stored and retrieved using a key string to identify them.  There is no need to worry about keeping this key unique from keys used by other extensions or FC itself, it will be autmoatically taken care of.

**User Data**

From the server, extensions may store a json serializable python object associated with a username and a channel name with readUserData and writeUserData.  This is saved in a dedicated database table.

**Other**

Server: clientFromName returns the GGPOClient instance associated with the provided username, or None if there isn't one.  By default this will only return clients in the room the calling extension instance is associated with.

Server + Client: advancedMonitoringAvailable returns True or False according to whether the current room (associated channel of a server instance, current channel for a client) is configured to allow monitoring of in-game events.